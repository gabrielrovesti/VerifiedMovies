import Web3 from 'web3'
import SelfSovereignIdentity from '../artifacts/contracts/SelfSovereignIdentity.sol/SelfSovereignIdentity.json'
import { AbiItem } from 'web3-utils'
import { expect } from 'chai'
const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'))

describe('SelfSovereignIdentity', () => {
  let contractInstance: string

  beforeEach(async () => {
    const accounts = await web3.eth.getAccounts()
    const contract = new web3.eth.Contract(SelfSovereignIdentity.abi as AbiItem[])
    const deployment = await contract.deploy({ data: SelfSovereignIdentity.bytecode }).send({
      from: accounts[0],
      gas: 6000000,
      gasPrice: '30000000000000'
    })
    contractInstance = deployment.options.address
  })

  it('should create a new DID document', async () => {
    const contract = new web3.eth.Contract(SelfSovereignIdentity.abi as AbiItem[], contractInstance)
    const result = await contract.methods.createDid().call()

    // Access the returned values from the result variable
    const didDocument = result[0]
    const success = result[1]

    // Perform assertions to check if the DID document was created successfully
    expect(success)
    expect(didDocument)
  })

  it('should create a child trusted DID document', async () => {
    const contract = new web3.eth.Contract(SelfSovereignIdentity.abi as AbiItem[], contractInstance)
    const childAddress = '0xdf3e18d64bc6a983f673ab319ccae4f1a57c7097' // Address to compute the child DID
    const signature = '...' // Signature generated by the certification authority

    const result = await contract.methods.createChildTrustedDid(childAddress, signature).call()

    // Access the returned values from the result variable
    const didDocument = result[0]
    const success = result[1]

    // Perform assertions to check if the child trusted DID document was created successfully
    expect(success)
    expect(didDocument)
  })

  it('should add a capability delegation', async () => {
    const contract = new web3.eth.Contract(SelfSovereignIdentity.abi as AbiItem[], contractInstance)
    const delegate = '0xdf3e18d64bc6a983f673ab319ccae4f1a57c7097' // Address of the delegate

    const accounts = await web3.eth.getAccounts()

    // Add a capability delegation by calling the contract method
    const transaction = await contract.methods.addCapabilityDelegation(delegate).send({ from: accounts[0] })

    // Perform assertions to check if the capability delegation was added successfully
    const delegationAdded = transaction.events.CapabilityDelegateAdded
    expect(delegationAdded)

    // ...
  })

  it('should add a service', async () => {
    const contract = new web3.eth.Contract(SelfSovereignIdentity.abi as AbiItem[], contractInstance)
    const serviceId = '...' // ID of the service
    const serviceType = 'Example' // Type of service
    const serviceEndpoint = 'https://example.com' // Endpoint of the service

    const accounts = await web3.eth.getAccounts()

    // Add a service by calling the contract method
    const transaction = await contract.methods.addService(serviceId, serviceType, serviceEndpoint).send({ from: accounts[0] })

    // Perform assertions to check if the service was added successfully
    const serviceAdded = transaction.events.ServiceAdded
    expect(serviceAdded)
  })

  it('should deactivate a DID document', async () => {
    const contract = new web3.eth.Contract(SelfSovereignIdentity.abi as AbiItem[], contractInstance)

    const accounts = await web3.eth.getAccounts()

    // Deactivate a DID document by calling the contract method
    const transaction = await contract.methods.deactivate().send({ from: accounts[0] })

    // Perform assertions to check if the DID document was deactivated successfully
    const didDeactivated = transaction.events.DidDeactivated
    expect(didDeactivated)

    // ...
  })

  it('should resolve a DID document', async () => {
    const contract = new web3.eth.Contract(SelfSovereignIdentity.abi as AbiItem[], contractInstance)
    const did = '...' // Specify the DID to resolve

    const result = await contract.methods.resolve(did).call()

    // Perform assertions to check the resolved DID document
    expect(result)
  })

  it('should resolve a chain of trust', async () => {
    const contract = new web3.eth.Contract(SelfSovereignIdentity.abi as AbiItem[], contractInstance)
    const did = '...' // Specify the DID to resolve the chain of trust

    const result = await contract.methods.resolveChain(did).call()

    // Perform assertions to check the resolved chain of trust
    expect(result)
  })
})
